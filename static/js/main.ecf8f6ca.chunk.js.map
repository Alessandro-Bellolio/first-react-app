{"version":3,"sources":["Navbar.js","Greeter.js","Counter.js","MoodToggler.js","CartItem.js","Cart.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Greeter","name","excitement","age","Fragment","repeat","onClick","alert","Counter","step","useState","count","setCount","className","MoodToggler","isHappy","setIsHappy","styles","color","style","CartItem","id","price","qty","updateQty","disabled","Cart","initialItems","initialState","JSON","parse","window","localStorage","getItem","items","setItems","useEffect","setItem","stringify","newQty","newItems","map","item","grandTotal","reduce","total","toFixed","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAceA,MAZf,WACC,OACC,6BACC,4BACC,oCACA,uCACA,wCCUWC,MAhBf,YAAsD,IAAnCC,EAAkC,EAAlCA,KAAkC,IAA5BC,kBAA4B,MAAf,EAAe,MAAZC,WAAY,MAAN,GAAM,EAIpD,OACC,kBAAC,IAAMC,SAAP,KACC,yCACYH,EACV,IAAII,OAAOH,IAEb,sCAAYC,EAAZ,cACA,4BAAQG,QAVI,WACbC,MAAM,gBAAD,OAAiBN,MASrB,e,aCAYO,MAVf,YAAgC,IAAD,IAAZC,YAAY,MAAL,EAAK,IACFC,mBAAS,GADP,mBACtBC,EADsB,KACfC,EADe,KAE9B,OACC,yBAAKC,UAAU,WACd,4BAAKF,GACL,4BAAQL,QAAS,kBAAMM,EAASD,EAAQF,KAAxC,IAAiDA,K,MCMrCK,MAXf,WAAwB,IAAD,EACUJ,oBAAS,GADnB,mBACdK,EADc,KACLC,EADK,KAGhBC,EAAS,CAAEC,MAAOH,EAAU,QAAU,OAC5C,OACC,wBAAIF,UAAU,cAAcM,MAAOF,EAAQX,QAHtB,kBAAMU,GAAYD,KAIrCA,EAAU,KAAO,O,aCcNK,MApBf,YAAwD,IAApCC,EAAmC,EAAnCA,GAAIpB,EAA+B,EAA/BA,KAAMqB,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,UAIzC,OACC,yBAAKX,UAAU,YACd,6BAAMZ,GACN,iCAAOqB,GACP,6BACC,4BAAQhB,QAPK,kBAAMkB,EAAUH,EAAIE,EAAM,IAObE,SAAUF,GAAO,GAA3C,KAGCA,EACD,4BAAQjB,QAZI,kBAAMkB,EAAUH,EAAIE,EAAM,KAYtC,MAED,wCAAcA,EAAMD,K,MCoBRI,MAlCf,YAAiC,IAAjBC,EAAgB,EAAhBA,aACTC,EAAeC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,UAD7B,EAEHvB,mBAASkB,GAAgBD,GAFtB,mBAEvBO,EAFuB,KAEhBC,EAFgB,KAI/BC,qBACC,WACCL,OAAOC,aAAaK,QAAQ,QAASR,KAAKS,UAAUJ,MAErD,CAAEA,IAGH,IAAMV,EAAY,SAACH,EAAIkB,GACtB,IAAMC,EAAWN,EAAMO,KAAI,SAACC,GAC3B,OAAIA,EAAKrB,KAAOA,EACR,2BAAKqB,GAAZ,IAAkBnB,IAAKgB,IAEjBG,KAERP,EAASK,IAGJG,EAAaT,EAAMU,QAAO,SAACC,EAAOH,GAAR,OAAiBG,EAAQH,EAAKnB,IAAMmB,EAAKpB,QAAO,GAAGwB,QAAQ,GAE3F,OACC,yBAAKjC,UAAU,QACd,wBAAIA,UAAU,cAAd,iBACA,yBAAKA,UAAU,cACbqB,EAAMO,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,eAAUK,IAAKL,EAAKrB,GAAIG,UAAWA,GAAekB,QAExE,wBAAI7B,UAAU,cAAd,iBAA0C8B,KCzBvCT,G,MAAQ,CACb,CAAEb,GAAI,EAAGpB,KAAM,iBAAkBqB,MAAO,KAAMC,IAAK,GACnD,CAAEF,GAAI,EAAGpB,KAAM,cAAeqB,MAAO,KAAMC,IAAK,GAChD,CAAEF,GAAI,EAAGpB,KAAM,aAAcqB,MAAO,IAAKC,IAAK,KAkBhCyB,MAff,WACC,OACC,6BACC,kBAAC,EAAD,CAAMrB,aAAcO,IACpB,kBAAC,EAAD,CAASzB,KAAM,IACf,kBAAC,EAAD,CAASA,KAAM,KACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASR,KAAK,aAAaE,IAAI,KAAKD,WAAY,IAChD,kBAAC,EAAD,CAASD,KAAK,SAASC,WAAY,IACnC,iDCZiB+C,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ecf8f6ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Navbar() {\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Home</li>\r\n\t\t\t\t<li>Contact</li>\r\n\t\t\t\t<li>About</li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nfunction Greeter({ name, excitement = 1, age = 18 }) {\r\n\tconst greet = () => {\r\n\t\talert(`Hello there, ${name}`);\r\n\t};\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<h1>\r\n\t\t\t\tHi there, {name}\r\n\t\t\t\t{'!'.repeat(excitement)}\r\n\t\t\t</h1>\r\n\t\t\t<p>You are {age} years old</p>\r\n\t\t\t<button onClick={greet}>Click Me!</button>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\nexport default Greeter;\r\n","import React, { useState } from 'react';\r\nimport './Counter.css';\r\n\r\nfunction Counter({ step = 1 }) {\r\n\tconst [ count, setCount ] = useState(0);\r\n\treturn (\r\n\t\t<div className=\"Counter\">\r\n\t\t\t<h2>{count}</h2>\r\n\t\t\t<button onClick={() => setCount(count + step)}>+{step}</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Counter;\r\n","import React, { useState } from 'react';\r\nimport './MoodToggler.css';\r\n\r\nfunction MoodToggler() {\r\n\tconst [ isHappy, setIsHappy ] = useState(true);\r\n\tconst toggleIsHappy = () => setIsHappy(!isHappy);\r\n\tconst styles = { color: isHappy ? 'green' : 'red' };\r\n\treturn (\r\n\t\t<h3 className=\"MoodToggler\" style={styles} onClick={toggleIsHappy}>\r\n\t\t\t{isHappy ? ':)' : ':('}\r\n\t\t</h3>\r\n\t);\r\n}\r\n\r\nexport default MoodToggler;\r\n","import React from 'react';\r\nimport './CartItem.css';\r\n\r\nfunction CartItem({ id, name, price, qty, updateQty }) {\r\n\tconst addOne = () => updateQty(id, qty + 1);\r\n\tconst lessOne = () => updateQty(id, qty - 1);\r\n\r\n\treturn (\r\n\t\t<div className=\"CartItem\">\r\n\t\t\t<div>{name}</div>\r\n\t\t\t<div>${price}</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={lessOne} disabled={qty <= 1}>\r\n\t\t\t\t\t-\r\n\t\t\t\t</button>\r\n\t\t\t\t{qty}\r\n\t\t\t\t<button onClick={addOne}>+</button>\r\n\t\t\t</div>\r\n\t\t\t<div>Total: ${qty * price}</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CartItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport CartItem from './CartItem';\r\nimport './Cart.css';\r\n\r\nfunction Cart({ initialItems }) {\r\n\tconst initialState = JSON.parse(window.localStorage.getItem('items'));\r\n\tconst [ items, setItems ] = useState(initialState || initialItems);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\twindow.localStorage.setItem('items', JSON.stringify(items));\r\n\t\t},\r\n\t\t[ items ]\r\n\t);\r\n\r\n\tconst updateQty = (id, newQty) => {\r\n\t\tconst newItems = items.map((item) => {\r\n\t\t\tif (item.id === id) {\r\n\t\t\t\treturn { ...item, qty: newQty };\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t});\r\n\t\tsetItems(newItems);\r\n\t};\r\n\r\n\tconst grandTotal = items.reduce((total, item) => total + item.qty * item.price, 0).toFixed(2);\r\n\r\n\treturn (\r\n\t\t<div className=\"Cart\">\r\n\t\t\t<h1 className=\"Cart-title\">Shopping Cart</h1>\r\n\t\t\t<div className=\"Cart-items\">\r\n\t\t\t\t{items.map((item) => <CartItem key={item.id} updateQty={updateQty} {...item} />)}\r\n\t\t\t</div>\r\n\t\t\t<h2 className=\"Cart-total\">Grand Total: ${grandTotal}</h2>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Cart;\r\n","import React from 'react';\nimport Navbar from './Navbar';\nimport Greeter from './Greeter';\nimport Counter from './Counter';\nimport MoodToggler from './MoodToggler';\nimport Cart from './Cart';\nimport './App.css';\n\nconst items = [\n\t{ id: 1, name: 'Taco Seasoning', price: 2.25, qty: 2 },\n\t{ id: 2, name: 'Pinto Beans', price: 1.99, qty: 3 },\n\t{ id: 3, name: 'Sour Cream', price: 3.5, qty: 1 }\n];\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<Cart initialItems={items} />\n\t\t\t<Counter step={5} />\n\t\t\t<Counter step={10} />\n\t\t\t<MoodToggler />\n\t\t\t<Navbar />\n\t\t\t<Greeter name=\"Alessandro\" age=\"23\" excitement={4} />\n\t\t\t<Greeter name=\"Sparky\" excitement={2} />\n\t\t\t<h1>Hello from App!</h1>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}